
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.4.0'
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
    id "com.github.ben-manes.versions" version "0.21.0"
}

ext {
    guavaVersion = '27.1-jre'
    jaxbApiVersion = '2.3.1'
    junitVersion = '4.12'
    lombokVersion = '1.18.6'
    springBootVersion = '2.1.3.RELEASE'
}

allprojects  {
    group = 'org.ks-plus'
    version = '0.1.0-SNAPSHOT'
}

subprojects {

    repositories {
        mavenCentral()
        maven { url 'http://repo.maven.apache.org/maven2' }
    }

    apply plugin: 'checkstyle'
    apply plugin: 'java-library'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        testCompile "org.projectlombok:lombok:${lombokVersion}"
        testCompile "junit:junit:${junitVersion}"
    }

    checkstyle {
        configFile = rootProject.file('.checkstyle.xml')
    }

    task dependencyTree(type: DependencyReportTask) {}
}

configure(subprojects.findAll { !it.name.endsWith('-api')} ) {

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'info.solidsoft.pitest'

    dependencies {
        compile 'org.springframework.boot:spring-boot-starter'
        compile 'org.springframework.boot:spring-boot-starter-data-jpa'
        compile "javax.xml.bind:jaxb-api:${jaxbApiVersion}"
        compile "com.google.guava:guava:${guavaVersion}"

        testCompile 'org.springframework.boot:spring-boot-starter-test'
        testCompile 'org.mockito:mockito-core'
        testCompile project(path: ':infrastructure:shared-test')
    }

    dependencyManagement {
        imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
    }

    configurations {
        testImplementation.extendsFrom compileOnly
    }

    pitest {
        targetClasses = ['ksch.*']

        threads = 4

        failWhenNoMutations = false
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'b', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

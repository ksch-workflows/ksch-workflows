
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.4.0'
    }
}

plugins {
    id "com.github.ben-manes.versions" version "0.27.0"
    id "idea"
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
    id "org.sonarqube" version "2.7"
}

allprojects  {
    group = 'org.ks-plus'
    version = '0.1.0-SNAPSHOT'
}

subprojects {

    repositories {
        mavenCentral()
        maven { url 'https://repo.maven.apache.org/maven2' }
    }

    apply plugin: 'checkstyle'
    apply plugin: 'java-library'

    sourceCompatibility = 11
    targetCompatibility = 11

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    ext {
        guavaVersion = '28.2-jre'
        junitVersion = '4.13'
        lombokVersion = '1.18.10'
        springBootVersion = '2.1.3.RELEASE'
        wicketVersion = '8.7.0'
        wicketSpringBootStarterVersion = '2.1.8'
    }

    dependencies {
        annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
        testImplementation "org.projectlombok:lombok:${lombokVersion}"
        testImplementation "junit:junit:${junitVersion}"
    }

    checkstyle {
        configFile = rootProject.file('.checkstyle.xml')
    }

    task checkstyle {
        dependsOn('checkstyleMain')
        dependsOn('checkstyleTest')
    }

    task dependencyTree(type: DependencyReportTask) {}
}

configure(subprojects.findAll { !it.name.endsWith('-api')} ) {

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'info.solidsoft.pitest'

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation "com.google.guava:guava:${guavaVersion}"

        testImplementation 'org.mockito:mockito-core'
    }

    dependencyManagement {
        imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
    }

    pitest {
        targetClasses = ['ksch.*']
        threads = 4
        failWhenNoMutations = false
    }
}

configure(subprojects.findAll { it.name.endsWith('-impl')} ) {
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation project(path: ':infrastructure:shared-test')
    }
}

configure(subprojects.findAll { it.name.endsWith('-web')} ) {
    dependencies {
        testImplementation project(path: ':infrastructure:shared-test')
    }

    sourceSets.main.resources {
        srcDir "src/main/resources/static"
    }
}

/**
 * Configuration of the versions which should be recommended for library updates.
 * 
 * @see "https://github.com/ben-manes/gradle-versions-plugin"
 */
dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'b', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

/**
 * @see "https://docs.gradle.org/current/userguide/gradle_wrapper.html"
 */
wrapper {
    jarFile = "infrastructure/gradle/gradle-wrapper.jar"
}
